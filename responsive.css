/* Responsive web design
Nos permite adaptar un sitio web a diferentes
 dispositivos con resoluciones diferentes

mobile first: nos permite adaptar un sitio para dispositivos pequeños
a dispositivos mayores
nos permite mostrar una pagina como prioridad del buscador

para trabajar con mobile first usamos media queries

FLEXBOX

flexbox: cajas flexibles, es una nueva 
forma de maquetar mas practica y flexible

en flexbox tenemos el

main-axis: es el eje X, empieza desde la izquierda hasta
el punto maximo de la derecha

cross-axis: es el eje Y, empieza desde arriba
y termina en el punto maximo de abajo

los que contienen son coordenadas o direcciones

flex: hace q el contenido  se divida y se adapte al 100% del container

flex direction: nos permite modificar la direccion en la cual se
ordenaran los elementos

column: los ordena por columnas
column-reverse: los ordena por columnas pero invierte el orden de los
elementos

row: los ordena en filas
row-reverse: lor ordena en filas, pero invierte el orden de los elementos

flex-wrap: hace respetar el tamaño de los elementos

flex-flow: es un shorthand de las propiedades anteriores

justity-content: nos ayuda a posicionar las cajas

center: centra el contenido

space-around: los centra pero con espacio entre cajas

space-between: le da un espacio entre cajas, las posiciona a los border del
container

align-items: nos permite posicionar lso elementos de un contenedor

align-content: usamos esta propiedad cuando hay varias lineas
y respeta el margin y padding establecidos

flex-start: nos lo posiciona al principio del contenedor
respetando su tamaño

center: nos posiciona los elementos en el centro del contenedor

flex-end: nos posiciona los elementos al final del contenedor

strecth: es la q esta por defecto, estira los elementos hasta ocupar
todo el container, si su tamaño no esta definido

el margin en las propiedades flex cuando esta usada se comporta
muy diferentemente

si establecemos el margin de un lado como auto posicionara la caja
del lado contrario

*/
/* Flex items */
/* 

Son cajas flexibles q estan dentro de los flex box

tenemos las propiedades

flex-grow: el espacio sobreante lo reparte entre todas las cajas
flex-shrink: indica cuanto espacio debe ceder, cuando se encoje
la pantalla
flex-basis: es lo mismo q width pero mas priorizado
flex: es un shorthand de lo anterior
order: es como el z index, pero en el eje que apunta el main axis,
osea X

*/

*{
    padding:0;
    margin:0;
    box-sizing: border-box;
    font-family: "Dancing Script";
}
.flexbox-container{
    display: block;
}
.flexbox-container__section{
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    align-content:flex-start;
    height: 700px;
    background-color: darkred;
}
.flexbox-container__section-div--one{
    background-color: yellow;
    border: 3px solid black;
    flex: 1 2 300px;
    height: 200px;
    text-align: center;
}
.flexbox-container__section-div{
    background-color: coral;
    border: 3px solid black;
    text-align: center;
    flex: 1 1 200px;
    height: 200px;
        
}
.flexbox-container__section-div--five{
    background-color: red;
    border: 3px solid black;
    width: 200px;
    height: 200px;
    
    text-align: center;
    flex-grow: 1;
}

/* flex-form */


.flex-container{
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: center;
    background-color: #444;
    margin: 100px 20px;
    border: 10px solid black;
    outline: 3px solid #0a4;
}

.flex-container__form{
    min-width: 500px;
    flex: 1;
    text-align: center;
    padding: 50px;
    order: 5;
    
}
.flex-container__form-div{
    max-width: 100%;
    margin: auto;
}

.flex-container__form-div-input{
    min-width: 100%;
    padding: 7px;
    margin: 7px 0px;
    border:none;
    border-bottom:3px solid #2b6;
    background-color: #444;
    color: white;

    border-top-right-radius: 5px;
}
.flex-container__form-div-input:hover{
    background-color: #555;
}
.flex-container__form-div-input:focus{
    background: linear-gradient(to top, transparent, #222);
    outline: none;
    border-bottom:3px solid #2e6;
}
.flex-container__form-div-textarea{
    min-width:100%;
    padding: 7px;
    margin: 7px 0px;
    min-height: 150px;
    border:none;
    border-bottom:3px solid #2b6;
    background-color: #444;
    resize: none;
    color: white;
    
    border-top-right-radius: 5px;
}
.flex-container__form-div-textarea:hover{
    background-color: #555;
}
.flex-container__form-div-textarea:focus{
    background: linear-gradient(to top, transparent, #111);
    outline: none;
    border-bottom:3px solid #2f6;
}
.flex-container__form-div-input--submit{
    width:100%;
    padding: 10px;
    margin: 7px 0px;
    border: 1px solid #333;
    background: linear-gradient(to top, #0a4, #084);;
    color: white;
}
.flex-container__form-div-input--submit:hover{   
    border: 1px solid #222;
    background: linear-gradient(to top, #094, #074);
}
.flex-container__form-div-input--submit:focus{
    outline: none;
}
.flex-container__form-div-input--submit:active{
    outline: none;
    border: 1px solid #111;
    background: linear-gradient(to top, #094, #054);
}

.flex-container__image{ 
    min-width: 300px;
    padding: 20px;
    margin: 40px;
    flex: 1;
    display: flex;  
    background-color: #aaa;  
    border-radius: 50%;
    order: 2;
}
.flex-container__image-img{
    width: 100%;
    margin: auto;
    object-fit: fill;
    border-radius: 50%;
}

/* 

linear-gradient: primer parametro la direccion en la q apuinta
segundo el color desde el cual empieza
tercero el color en que termina

linear-gradient(to bottom, red, blue)
va hacia abajo empezando en rojo y  termina en azul

*/

/* Grid */
/* Es un estilo de layout, es un valor de la propiedad display
nos permite trabajar a traves de grillas */

/* cuando asginamos grid el elemento se comporta como bloque
lo que cambia es lo de adentro

cada elemento que este dentro del container es un item

grid cell es la celda q se crea con el grid

grid tracks son las columnas y filas

grid area: es una parte del grid q definimos nosotros

grid line: es una linea de columna o fila


*/
.grid-container{
    border: 3px solid black;
    margin: 15px;
    display: grid;
    
    grid-template-columns: repeat(3, minmax(150px, 300px));
    grid-template-rows: repeat(3, 300px);
    grid-auto-columns: 1fr;
    grid-auto-rows: 1fr;
    
    grid-auto-flow: dense;

    grid-gap: 1em;
    background-color: #1aa;

    justify-content: space-around;
    align-content: space-around;

    justify-items: center;
    align-items: center;

}
/* 
grid-template-columns: nos permite establecer el tamaño de las
celdas de la columnas del grid

grid-template-rows: los mismo que el anteriori pero con las filas

1 fr: se usa en template-columns, para decirle cuanto de lo sobrante se le
dara a la columna

grid-gap: nos permite establecer la separacion entre celdas
es un shorthand de

grid-row-gap separa solo las filas
grid-column-gap separa solo las columnas

*/

/* Grid implicito y explicito */

/* Grid implicito

nos permite modificar las cualidades de las celdas sobrantes

grid-auto-rows: nos permite establecer el tamaño de las filas de esas
celdas sobrantes

grid-auto-columns: igual q el anterior pero con columnas

grid-auto-flow: nos permite establecer en que posicion las nuevas celdas
se ordenaran

grid-template-columns: repeat(times, size of columns)

es una abreviacion para utilizar mejor esta propiedad

*/

/* Grid dinamico 


minmax:nos permite establecer lo minimo q medira y lo maximo

auto-fill: genera la cantidad de columnas q pueda, 
q cumplan con las propiedades, sigue creando aun si todas las
especificadas ya ocuparon su maximo lugar

auto-fit: genera las columnas para llenar el tamaño del contenedor


*/

.grid-item{
    background-color: #074;
    border: 2px solid #000;
    padding:50px;
    font-size: 3em;
    text-align: center;

}

/* :nth-child(index)
nos permite seleccionar el elemento hijo de algo segun su posicion

*/

/* alineacion y control de flujo

la alineacion es dentro de cada celda y no la alineacion total del
flex container, cada celda seria un flex container
estas dos propiedades hacen q las celdas solo usen lo necesario

justify-items: 
esto nos lo alinea horizontalmente

start: nos lo posiciona al principio de la celda
center: nos lo posiciona en el centro de la celda
end: nos lo posiciona al final de la celda

align-items:nos lo alinea verticalmente
start center end

justify-content
align-content

funciona igual que las anteriores solo que tienen 3 valores mas

space-around space-between space-evenly


ITEMS

aling-self: funciona igual sol que modifica un item en especifico
justify-self: funciona igual sol que modifica un item en especifico

place-self: align-self justify-self;


*/

.grid-item:nth-child(9){
    align-self: end;
    justify-self: end;
}
.grid-item:nth-child(7){
    justify-self: start;
    align-self: end;
}
.grid-item:nth-child(8){
    justify-self: center;
    align-self: start;
}
.grid-item:nth-child(6){
    justify-self: center;
    align-self: center;
}
.grid-item:nth-child(4){
    justify-self: center;
    align-self: center;
}
.grid-item:nth-child(1){
    justify-self: start;
    align-self: start;
}
.grid-item:nth-child(3){
    justify-self: end;
    align-self: start;
}



/* Gallery */

.gallery{
    display: grid;

    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    grid-template-rows: repeat(auto-fit, minmax(150px, 200px));
    
    grid-auto-rows: 200px;
    grid-auto-flow: dense;
    
    grid-gap: 1em;

    margin: 1em;
    padding: 1em;

    background-color: white;
}
.gallery__image{
    background: linear-gradient(to top, #a00, #00a);
    text-align: center;
    font-size: 3em;
    line-height: 200px;
    font-weight: 1000;
}

.gallery__image:first-child{
    grid-column: span 2;
}
.gallery__image:nth-child(3){
    grid-row: span 2;
}
.gallery__image:nth-child(11){
    grid-column: span 2;
}
.gallery__image:nth-child(13){
    grid-column: span 2;
}
.gallery__image:nth-child(6){
    grid-row: span 2;
}


/* GRID AREA */
/* 
es un conjunto consecutivo de celda, tambien puede estar en 
cualquier lado, minimo para q sea un area teien q tener dos celdas

*/


.grid{
    background-color: #000;
    display: grid;

    grid-template-areas: 
    "header header header"
    "aside main main"
    "aside main main"
    "aside main main"
    "footer footer footer";

    grid-template-rows: repeat(auto-fill, 1fr);
    height: 100vh;
    border: 5px solid black;
}
.grid-container-item{
    padding: 1em;
}
.grid-header{
    background-color: #444;
    grid-area: header;
}
.grid-main{
    background-color: #777;
    grid-area: main;
}
.grid-aside{
    background-color: #999;
    grid-area: aside;
}
.grid-footer{
    background-color: #333;
    grid-area: footer;
}

/* Responsive  Design */

/* 
Es una tecnica para daptar el contenido de una apgina web
a distintas resoluciones con el fin de que se vea bien


trabaja con estructuras flexibles y media queries

los media querias se usan para aplicar diferentes etilos dependiendo
de la resoulucion del dispositivo, son condicionales que
utilizan

ancho y alto de la ventana grafica
ancho y alto del dispositivo
orientacion(tablet/tlf modo horizontal o vertical)
resolucion

all- apto para todso los dispositivos

print - destinado a material impreso y visualizacion de documentos
en una pantalla en modo de viste previa de impresion

screen-- destinado a las pantallas

speech- destinado a sintetizadores de voz


utiliza los operadores AND | OR

orientacion : landscape y portrait

en responsive design tenemos dos metodlogias

mobile first- primero crear todo a partir de medidas de mobile
y leug o q se adapte a dispositives mas grandes

desktop first: hacer una web para escritorio y luego adaptarl oa dispositivos
mas pequeños

content-first: se estructura es el contenido y luego se decide

actualmente es recomendado usar mobile first


*/





@media screen and (min-width:0px) and (max-width:400px){
    .responsive{
        display: flex;
        flex-direction: column;
    
        height: 100vh;
    }
    .responsive-header, .responsive-main, .responsive-aside, .responsive-footer{
        padding: 20px;
    }
    .responsive-header{
        flex-basis: 15vh;
        background-color: blue;
    }
    .responsive-aside{
        background-color: green;
        flex-basis: 20vh;
        flex-grow: 1;
        flex-shrink: 0;
    }
    .responsive-main{
        flex-basis: 30vh;
        flex-grow: 2;
        flex-shrink: 0;
        background-color: yellow;
    }
    .responsive-footer{
        flex-basis: 10vh;
        flex-grow: 2;
        flex-shrink: 0;
        background-color: red;
    }
}
@media screen and (min-width:400px) and (max-width:900px){
    .responsive{
        display: flex;
        flex-direction: column;
    
        height: 100vh;
    }
    .responsive-header, .responsive-main, .responsive-aside, .responsive-footer{
        padding: 20px;
    }
    .responsive-header{
        flex-basis: 15vh;
        background-color: blue;
    }
    .responsive-aside{
        background-color: green;
        flex-basis: 20vh;
        flex-grow: 1;
        flex-shrink: 0;
    }
    .responsive-main{
        flex-basis: 30vh;
        flex-grow: 2;
        flex-shrink: 0;
        background-color: yellow;
    }
    .responsive-footer{
        flex-basis: 10vh;
        flex-grow: 2;
        flex-shrink: 0;
        background-color: red;
    }
}

@media screen and (min-width:900px) and (max-width:1600px){
    .responsive{
        display: grid;
    
        grid-template-areas: 
        "header header header header"
        "aside main main main"
        "aside main main main"
        "aside main main main"
        "aside main main main"
        "aside main main main"
        "footer footer footer footer";
    
        grid-template-rows: repeat(auto-fill, 1fr);
        height: 100vh;
    }
    .responsive-header, .responsive-main, .responsive-aside, .responsive-footer{
        padding: 20px;
    }
    .responsive-header{
        display: flex;
        flex-direction: row;
        padding: 2em;

        background-origin: #888;
        grid-area: header;
    }
    .responsive-header > h1{
        flex-basis: 60vw;
        flex-grow: 2;
        flex-shrink: 0;

        justify-self: center;
        align-self: center;
    }
    .responsive-header > nav{
        flex-basis: 30vw;
        flex-grow: 1;
        flex-shrink: 0;

        display: inline-block;
        align-self: center;
    }
    .responsive-aside{
        grid-area: aside;
        background-color: #333;
    }
    .responsive-main{
        grid-area: main;
        flex-grow: 2;
        background-color: #666;
    }
    .responsive-footer{
        grid-area: footer;
        background-color: #aaa;
    }
}

/* TRANSITIONS */

/* Nos muestra los frames de un estado a otro segun el tiempo
y forma q le indiquemos,muestra el progreso de un cambio 

para llamarle necesitamos asignarle minimos dos propiedades

transition-property = property - all - none
nos permite decidir q propiedad la transicion modificara

transition-duration: duration ( s )
nos permite decidir cuanto tiempo durara esta transicion

transition-delay: nos permite establecer el tiempo q se debe esperar
para q la transicion se efectue

transition-timing: nos permite establecer la transicion del tiempo

tenemos

linear: los cambios se ve a la misma velocidad
ease: empieza muy rapido y termina despacito
ease-in: empieza lento y termina rapido
ease-out: empieza rapido y termina lento
ease-in-out: empíeza rapido luego lento luego rapido
step start: lo hace instantaneo
step end: lo hace cuando el tiempo se acaba

*/

.transition-container{
    background-color: #111;
}
.transition-container:hover div{
    left: 80%;
    background-color: grey;
}
.transition-container__div{
    position: relative;
    width: 50px;
    height: 50px;
    background-color: white;
    margin-top: 5%;
    left: 5%;
}
.transition-container__div:nth-child(1) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: linear ;
}
.transition-container__div:nth-child(2) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: ease ;
}
.transition-container__div:nth-child(3) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: ease-in ;
}
.transition-container__div:nth-child(4) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: ease-out ;
}
.transition-container__div:nth-child(5) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: ease-in-out ;
}
.transition-container__div:nth-child(6) {
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: step-start;
}
.transition-container__div:nth-child(7){
    transition-property:left;
    transition-duration: 4s;
    transition-timing-function: step-end ;
}

/* Animations */

/* Es lo mismo q una transicion solo q esta requieren unas propiedades
llamadas

@Keyframes

podemos definir como se comportara una animacion con
from y to

asi como tambien con porcentajes

para añadirle una animacion a un elemento usamos la propiedad

animation-name: nombre de la animacion

y luego especificar cuanto tiempo durara

animation-duration: duration

tambien tenemos

animation-timing-function: funciona igual q en transition-timing-function

tambien tenemos

animation-iteration-count: nos permite especificar cuantas veces se repetira
la animacion

tambien tenemos 

animation-direction: nos permite cambiar la direccion de la animacion

normal | reverse | alternate | alternate-reverse
normal   al reves   alterna    alterna pero empieza alreves

tambien tenemos

animation-fill-mode

backward: se queda como quedo en la primera instancia   
forwards: lo mismo pero en la ultima instancia
both: arranca con el valor del primer instancia y termina con el
de la ultima

*/

.animation-container{
    background-color: grey;
    padding: 1%;
}
.animation-container__div{
    width: 200px;
    height: 200px;
    animation-name: moving;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-fill-mode: both;
    position: relative;
    background-color: white;
}
@keyframes moving {

    0%{
        position: relative;
        left: 0; 
        background-color: white;
    }
    50%{
        background-color: inherit;
    }
    100%{
        position: relative;
        left: 80%;
        background-color: black;
    }

}
/* TRANSFORM */
/* es una propiedad nos permite transformar al objeto
las transformaciones reciben funciones

tenemos
translateX(): nos mueve el objeto en el eje horizontal
translateY(): nos mueve el objeto en el eje vertical

translate(x, y) un shorthand

scale(); es un shothand de scaleX(); y scaleY();
nos permite modificar el tamaño del objeto
se multiplica el tamaño definido por el valor q introduzcamos

skew(); lo que hace es voltearlo en su eje segun los grados q indiquemos
"deg"


a transform podemos darle las funcinoes q queramos


*/

.transform-container{
    background-color: black;
    padding: 5em;
}
.transform-container__div{
    width: 200px;
    height: 200px;
    background-color: grey;
    transform: translate(100px ,200px) scale(.7) ;
}
/* tambien tenemos clip-path 
el cual es un generador de formas
*/

/* BACKGROUND */
/* 

faltaron propiedades de background por explicar

background-image: url();
nos permite añadirle una imagen al background

background-size: nos permite modificar el tamaño del background
podemos ponerle medidas, asi como contain y cover

background-repeat: nos permite establecer si la imagen de
 fondo se va a repetir


background-clip- la recorta
background-origin: nos permite decidir desde donde se mostra la imagen
border-box la muestra desde los bordes
padding-box, desde los padding
content-box la muiestra desde el espaci q tien el contenido

background-position, nos permite combinar dos posiciones
para posicionar la imagen en el background

background-attachment: nos permite elegir que contenedor utilizara como
referencia la imagen

esta scroll q es por defecto, y fixed, que nos opermite hacer
q tome como punto de referencia el body completo

*/
.background-container{
    background-color: grey;
    background-image: url(casa.png);
    background-size: contain;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: top center;
    width: 100vw;
    height: 100vh;
    border: 15px solid black;
    padding: 50px;
}
/* variables */
/* 
para definir variables se coloca

:root

luego dentro de root

--name-of-variable

y le agregamos el valor q queramos

luego para poner la variable dentro de una propiedad

utilizamos

var(name-of-variable)

las variables en css tambien tiene scope

*/
:root{
    --red: red;
}
.variables-container{
    width: 100vw;
    height: 100vh;
    background-color: grey;
    padding:5%;
}
.variables-container__div--one{
    width: 20vw;
    height: 30vh;
    background-color: var(--red);
    margin-bottom: 5%;
}
.variables-container__div--two{
    width: 20vw;
    height: 30vh;
    background-color: black;
}

/* FILTER */

